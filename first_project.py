# -*- coding: utf-8 -*-
"""first-project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1X8XlDvWdCyTVhBqbrFtnnM3QKmjOI9Xw
"""



"""*Tutorial:* https://www.youtube.com/watch?v=29ZQ3TDGgRQ

# **Load data**

*Data source:* https://github.com/dataprofessor/data/blob/master/delaney_solubility_with_descriptors.csv
"""

import pandas as pd

df = pd.read_csv('https://raw.githubusercontent.com/dataprofessor/data/master/delaney_solubility_with_descriptors.csv')
df

"""# **Data Preparation**

## Data separation as X and y
"""

y = df['logS']
y

X = df.drop('logS', axis=1) ##axis=1 refers to column, axis=0 refers to rows
X

"""## Data splitting"""

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state=100)

X_test ##has about 20% of the data

X_train ##has about 80% of data

"""# **Model Building**

## **Linear Regression**

###**Training the model**
"""

from sklearn.linear_model import LinearRegression

lr = LinearRegression()
lr.fit(X_train, y_train)

"""###**Applying the model to make a prediciton**"""

y_lr_train_pred = lr.predict(X_train)
y_lr_test_pred = lr.predict(X_test)

print(y_lr_train_pred, y_lr_test_pred)

"""### **Evaluate model performance**"""

##compare predicted value with original/actual value
##low dispersion means performance will be good

from sklearn.metrics import mean_squared_error, r2_score

lr_train_mse = mean_squared_error(y_train, y_lr_train_pred)
lr_train_r2 = r2_score(y_train, y_lr_train_pred)

lr_test_mse = mean_squared_error(y_test, y_lr_test_pred)
lr_test_r2 = r2_score(y_test, y_lr_test_pred)

print('LR MSE (Train): ', lr_train_mse)
print('LR R2 (Train): ', lr_train_r2)
print('LR MSE (Test): ', lr_test_mse)
print('LR R2 (Test): ', lr_test_r2)

lr_results = pd.DataFrame(['Linear Regression', lr_train_mse, lr_train_r2, lr_test_mse, lr_test_r2]).transpose()
lr_results.columns = ['Method', 'Training MSE', 'Training R2', 'Test MSE', 'Test R2']

lr_results

"""## **Random Forest**

### **Training the model**
"""

from sklearn.ensemble import RandomForestRegressor

rf = RandomForestRegressor(max_depth=2, random_state=100)
rf.fit(X_train, y_train)

"""### **Applying the model to make a prediction**"""

y_rf_train_pred = rf.predict(X_train)
y_rf_test_pred = rf.predict(X_test)

"""### **Evalute model performance**"""

##compare predicted value with original/actual value
##low dispersion means performance will be good

from sklearn.metrics import mean_squared_error, r2_score

rf_train_mse = mean_squared_error(y_train, y_rf_train_pred)
rf_train_r2 = r2_score(y_train, y_rf_train_pred)

rf_test_mse = mean_squared_error(y_test, y_rf_test_pred)
rf_test_r2 = r2_score(y_test, y_rf_test_pred)

rf_results = pd.DataFrame(['Random Forest', rf_train_mse, rf_train_r2, rf_test_mse, rf_test_r2]).transpose()
rf_results.columns = ['Method', 'Training MSE', 'Training R2', 'Test MSE', 'Test R2']
rf_results

"""## **Model Comparison**"""

df_models = pd.concat([lr_results, rf_results], axis=0)
df_models

df_models.reset_index(drop=True)

"""## Data visualization of prediction results"""

import matplotlib.pyplot as plt
import numpy as np

plt.figure(figsize=(5,5))
plt.scatter(x=y_train, y=y_lr_train_pred, c = '#7CAE00', alpha=0.3)

z = np.polyfit(y_train, y_lr_train_pred, 1)
p = np.poly1d(z)

plt.plot(y_train, p(y_train), '#F8766D')
plt.ylabel('Predict LogS')
plt.xlabel('Experimental LogS')

